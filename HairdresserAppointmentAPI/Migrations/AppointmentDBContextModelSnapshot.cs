// <auto-generated />
using System;
using HairdresserAppointmentAPI.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HairdresserAppointmentAPI.Migrations
{
    [DbContext(typeof(AppointmentDBContext))]
    partial class AppointmentDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.HasPostgresExtension("postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.Appointment", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<int>("businessId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("businessId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.Business", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<int>("appointmentPeopleCount")
                        .HasColumnType("integer");

                    b.Property<int>("appointmentTimeInterval")
                        .HasColumnType("integer");

                    b.Property<string>("city")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("district")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("latitude")
                        .HasColumnType("double precision");

                    b.Property<Point>("location")
                        .HasColumnType("geometry");

                    b.Property<double>("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("officialHolidayAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("province")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("telephone")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<DateTime?>("updateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("verified")
                        .HasColumnType("boolean");

                    b.Property<string>("workingEndHour")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("workingStartHour")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("workingType")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.BusinessCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("businessId")
                        .HasColumnType("integer");

                    b.Property<int>("categoryId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("businessId");

                    b.HasIndex("categoryId");

                    b.ToTable("BusinessCategory");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.BusinessGallery", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("businessId")
                        .HasColumnType("integer");

                    b.Property<string>("imagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("id");

                    b.HasIndex("businessId");

                    b.ToTable("BusinessGallery");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.BusinessWorkingInfo", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<int>("appointmentPeopleCount")
                        .HasColumnType("integer");

                    b.Property<int>("appointmentTimeInterval")
                        .HasColumnType("integer");

                    b.Property<int>("businessId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("endHour")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("startHour")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("id");

                    b.HasIndex("businessId");

                    b.ToTable("BusinessWorkingInfo");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.Rating", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("businessId")
                        .HasColumnType("integer");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("point")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("updateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("businessId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.Services", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("businessId")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.HasIndex("businessId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("fullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("imagePath")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("updateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("verified")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.Appointment", b =>
                {
                    b.HasOne("HairdresserAppointmentAPI.Model.Business", "business")
                        .WithMany("appointments")
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("BusinessFK");

                    b.Navigation("business");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.BusinessCategory", b =>
                {
                    b.HasOne("HairdresserAppointmentAPI.Model.Business", "business")
                        .WithMany("categories")
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BusinessFK");

                    b.HasOne("HairdresserAppointmentAPI.Model.Category", "category")
                        .WithMany("categories")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CategoryFK");

                    b.Navigation("business");

                    b.Navigation("category");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.BusinessGallery", b =>
                {
                    b.HasOne("HairdresserAppointmentAPI.Model.Business", "business")
                        .WithMany("galleries")
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BusinessFK");

                    b.Navigation("business");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.BusinessWorkingInfo", b =>
                {
                    b.HasOne("HairdresserAppointmentAPI.Model.Business", "business")
                        .WithMany("workingInfos")
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BusinessFK");

                    b.Navigation("business");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.Rating", b =>
                {
                    b.HasOne("HairdresserAppointmentAPI.Model.Business", "business")
                        .WithMany("ratings")
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BusinessFK");

                    b.Navigation("business");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.Services", b =>
                {
                    b.HasOne("HairdresserAppointmentAPI.Model.Business", "business")
                        .WithMany("services")
                        .HasForeignKey("businessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BusinessFK");

                    b.Navigation("business");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.Business", b =>
                {
                    b.Navigation("appointments");

                    b.Navigation("categories");

                    b.Navigation("galleries");

                    b.Navigation("ratings");

                    b.Navigation("services");

                    b.Navigation("workingInfos");
                });

            modelBuilder.Entity("HairdresserAppointmentAPI.Model.Category", b =>
                {
                    b.Navigation("categories");
                });
#pragma warning restore 612, 618
        }
    }
}
